One of the challenges, anyone developing an e-commerce based app faces, is
that an order cart has to be validated before it is considered to be a
legitimate order and inserted into the database. This validation is extensive
and thorough, in that it has to verify a number of things including: the cart
items are actual products, the prices of the cart items are valid, the order
total is valid, etc.

In this question, we'll be focusing on one particular part of this cart
validation journey; the validation of a cart item's ordered quantity. We have
a specific amount of inventory for each product. We're receiving requests for
Orders to be placed for the same products, by different users, at the same
time. While validating the cart, we check if the ordered quantity is available
for that particular product. And if there is, we let the order go through.

Do you see any problems with this logic? If there is, mention that problem
and also a fix or it. If there isn't, mention why.

Be as thorough or as precise as you want. The only thing we're looking to
gather from your answers is that it is clear enough for us to understand
properly.

ANSWER BELOW THIS LINE
===============================================================================

One issue that can happen in this case is `order data inconsistency`.  e.g, 


User A and User B both are buying Product X at the same time.  

Both will check that they have there required quantity available at the same time and since 
there are seperate processes checking this validation, both of these validations will pass.

Although, chances of it happening is quite low but it is still a possibility. 

*Solution:*

To solve it, first we would have ask ourself: What is more important for us:

1) Data Order Consistency
2) Site Availability/Scalability

If order consistency is something that we want then:
   
   We have to maintain single mid-service for processing order data.
In other words we would have to check quantity and process order in a single transaction. The 
second request should be in the same process but in a different transaction. With locking and transactions applied
we will maintain data order consistency and  2nd request will pass/fail depending on the result of the 1st transaction.
Having said that, adding above restriction will slow down our system as it will essentially mean that we are
relying on a single server/NODE/DB.  This is specially a cost on SCALABILITY.


For ensuring high availability/scalability we have to remove single point of failure. We never should be relying on single server/node/database.
To be able to do that, we can analyze our business rules.